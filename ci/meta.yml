meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-ingestion-ecs-cluster
        inputs:
          - name: dataworks-aws-ingestion-ecs-cluster
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ingestion-ecs-cluster
        inputs:
          - name: dataworks-aws-ingestion-ecs-cluster
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ingestion-ecs-cluster
        inputs:
          - name: dataworks-aws-ingestion-ecs-cluster
          - name: terraform-bootstrap
          - name: dw-al2-ecs-ami
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    test-ecs-ami:
      task: test-ecs-ami
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              source ./previous_success/exit-if-succeeded.sh
              export AWS_DEFAULT_REGION
              source /assume-role
              set -x
              max_retries=5
              task_json="$(aws ecs run-task --cluster "$CLUSTER_NAME" --task-definition ami_ecs_test_td --launch-type EC2 --overrides "{\"containerOverrides\": [{\"name\": \"test-ecs-ami\", \"command\": [\"sh\", \"-c\", \"sleep 300\"]}]}")"
              task_arn=$(echo $task_json | jq -r '.tasks[0].taskArn')
              while [ $max_retries > 0 ]
              do
                sleep 20
                task_json="$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks $task_arn)"
                container_status="$(echo "$task_json" | jq -r '.tasks[0].containers[0].lastStatus')"
                if [ "$container_status" == "RUNNING" ]; then
                  exit 0
                fi
                let "max_retries-=1"
              done
              exit 1
        inputs:
          - name: previous_success
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        CLUSTER_NAME: ingestion

    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              source ./previous_success/exit-if-succeeded.sh
              set +x
              AMI_ID=$(cat dw-al2-ecs-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results
              echo "$AMI_ID $RESULT" > "$PIPELINE.test"
              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: dw-al2-ecs-ami
          - name: previous_success
    terminate-ecs-instances:
      task: terminate-ecs-instances
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              source ./previous_success/exit-if-succeeded.sh
              export AWS_DEFAULT_REGION
              ami_id=$(cat dw-al2-ecs-ami/id)
              source /assume-role
              set -x

              ASGs=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[]".AutoScalingGroupName --output text)
              arrASGs_ingestion=$(echo $ASGs | grep -o -e $ASG_NAME'-lt[a-zA-Z0-9_-]*')
              ASGlatest=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $arrASGs_ingestion --query 'reverse(sort_by(AutoScalingGroups,&CreatedTime))[0].AutoScalingGroupName')
              ASGlatest="${ASGlatest:1:${#ASGlatest}-2}"

              instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=$ASG_NAME-* Name=tag:aws:autoscaling:groupName,Values=$ASGlatest Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')
              for instance_id in $instance_ids;
                do
                  echo terminating "$instance_id"
                  aws ec2 terminate-instances --instance-ids "$instance_id"
                done;

              desired_capacity=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $ASGlatest | jq -r '.AutoScalingGroups[0].DesiredCapacity')
              count=0
              max_retries="$MAX_RETRIES"
              while [ "$count" -lt "$max_retries" ]
                do
                  sleep "$SLEEP_TIME"
                  instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=ingestion-ecs-cluster-* Name=tag:aws:autoscaling:groupName,Values=$ASGlatest Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')
                  if [ ${#instance_ids} -ge 1 ]; then
                    instance_count=$(echo $instance_ids | tr ' ' '\n' | wc -l)
                  else
                    instance_count=0
                  fi
                  if [[ $instance_count -eq $desired_capacity ]]; then
                    image_ids="$(aws ec2 describe-instances --instance-ids $instance_ids | jq -r '.Reservations[] | .Instances[] | .ImageId')"
                    for i in $image_ids; do
                      if [ ! "$i" == "$ami_id" ]; then
                        echo "Instance found with wrong AMI ID, Exiting..."
                        exit 1
                      fi;
                    done;
                    echo "All desired instances are running untested AMI, Exiting with success..."
                    exit 0
                  fi;
                  let "count+=1"
                done;
              echo "Cluster was unable to start desired instances with untested AMI in expected timeframe, Exiting with error..."
              exit 1
        inputs:
          - name: dw-al2-ecs-ami
          - name: previous_success
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        ASG_NAME: ingestion-ecs-cluster
        SLEEP_TIME: 60
        MAX_RETRIES: 15
    check-ami-test-results:
      task: check-ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              PREVIOUS_SUCCESS=false
              AMI_ID=$(cat untested_ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              PATH_TO_RESULTS="ami-builder-configs/results"
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              if [ -f "./$PATH_TO_RESULTS/$PIPELINE.test" ]; then
                set +e
                grep "$AMI_ID SUCCESS" "./$PATH_TO_RESULTS/$PIPELINE.test"
                if [ $? -eq 0 ]; then
                  PREVIOUS_SUCCESS=true
                fi
                set -e
              fi
              touch ./previous_success/exit-if-succeeded.sh
              if $PREVIOUS_SUCCESS; then
                 echo 'echo "AMI already passed. Exiting..."; exit 0' > ./previous_success/exit-if-succeeded.sh
              fi
              chmod +x ./previous_success/exit-if-succeeded.sh
        outputs:
          - name: previous_success
        inputs:
          - name: meta
          - name: untested_ami
